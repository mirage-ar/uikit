{"version":3,"file":"Accordion.jsx","sourceRoot":"","sources":["Accordion.tsx"],"names":[],"mappings":"AAAA;;;;uFAIuF;AAEvF,OAAO,KAAK,EAAE,EAAgB,QAAQ,EAAE,MAAM,OAAO,CAAC;AACtD,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,MAAM,MAAM,wBAAwB,CAAC;AAO5C,IAAM,SAAS,GAA6B,UAAC,EAAkB;QAAhB,KAAK,WAAA,EAAE,OAAO,aAAA;IACrD,IAAA,KAAsB,QAAQ,CAAC,KAAK,CAAC,EAApC,MAAM,QAAA,EAAE,SAAS,QAAmB,CAAC;IAE5C,IAAM,YAAY,GAAG;QACnB,SAAS,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,EAAL,CAAK,CAAC,CAAC;IAC7B,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG,UAAC,MAAe;QAClC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,CACL,CAAC,KAAK,CACJ,GAAG,CAAC,CAAC,iBAAiB,CAAC,CACvB,GAAG,CAAC,aAAa,CACjB,KAAK,CAAC,CAAC,EAAE,CAAC,CACV,MAAM,CAAC,CAAC,EAAE,CAAC,CACX,OAAO,CAAC,CAAC,GAAG,CAAC,EACb,CACH,CAAC;SACH;aAAM;YACL,OAAO,CACL,CAAC,KAAK,CACJ,GAAG,CAAC,CAAC,cAAc,CAAC,CACpB,GAAG,CAAC,MAAM,CACV,KAAK,CAAC,CAAC,EAAE,CAAC,CACV,MAAM,CAAC,CAAC,EAAE,CAAC,CACX,OAAO,CAAC,CAAC,GAAG,CAAC,EACb,CACH,CAAC;SACH;IACH,CAAC,CAAC;IAEF,IAAM,cAAc,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEpD,OAAO,CACL,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,cAAc,CAAC,CAC1B,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAExD;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAChC;QAAA,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,CACjB;QAAA,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAC3D;UAAA,CAAC,WAAW,CAAC,MAAM,CAAC,CACtB;QAAA,EAAE,MAAM,CACV;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAClC;QAAA,CAAC,OAAO,CACV;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","sourcesContent":["/**----------------------------------------------------------------------------------\n * Accordion fold component\n * Mirage UI Kit (( v1.0 ))\n * @author max <max@mirage.space> | November 29, 2022 | Updated: nevah\n * ----------------------------------------------------------------------------------*/\n\nimport React, { ReactElement, useState } from \"react\";\nimport Image from \"next/image\";\n\nimport styles from \"./Accordion.module.css\";\n\ninterface AccordionProps {\n  title?: string;\n  content?: string;\n}\n\nconst Accordion: React.FC<AccordionProps> = ({ title, content }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleToggle = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const buttonImage = (isOpen: boolean): ReactElement => {\n    if (!isOpen) {\n      return (\n        <Image\n          src={\"/icons/plus.svg\"}\n          alt=\"A plus sign\"\n          width={16}\n          height={16}\n          quality={100}\n        />\n      );\n    } else {\n      return (\n        <Image\n          src={\"/icons/x.svg\"}\n          alt=\"An X\"\n          width={16}\n          height={16}\n          quality={100}\n        />\n      );\n    }\n  };\n\n  const accordionClass = [styles.accordion].join(\" \");\n\n  return (\n    <div\n      className={accordionClass}\n      style={isOpen ? { height: \"100%\" } : { height: \"48px\" }}\n    >\n      <div className={styles[\"--title\"]}>\n        <div>{title}</div>\n        <button className={styles[\"--button\"]} onClick={handleToggle}>\n          {buttonImage(isOpen)}\n        </button>\n      </div>\n      <div className={styles[\"--content\"]}>\n        {content}\n      </div>\n    </div>\n  );\n};\n\nexport default Accordion;\n"]}